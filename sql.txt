    create database quanlykhoahoc;
    use quanlykhoahoc;

    -- bảng tư vấn khoahoc
    CREATE TABLE tuvan (
    id_tuvan INT PRIMARY KEY AUTO_INCREMENT,
    ten_hocvien VARCHAR(100),
    so_dien_thoai VARCHAR(15),
    email VARCHAR(100),
    khung_gio VARCHAR(20),
    trang_thai NVARCHAR(100) DEFAULT 'Chưa liên hệ'
    );  

    -- bảng khoahoc
    create table khoahoc (
        id_khoahoc int primary key auto_increment,
        ten_khoahoc varchar(100),
        mo_ta text,
        giang_vien varchar(100),
        thoi_gian date,
        chi_phi int,
        hinh_anh varchar(255),
        danh_gia_tb decimal(3, 2)
    );

    -- bảng hocvien
    create table hocvien (
        id_hocvien int primary key auto_increment,
        ten_hocvien varchar(100),
        email varchar(100),
        so_dien_thoai varchar(15),
        mat_khau varchar(255),
        is_admin BOOLEAN DEFAULT FALSE
    );

        CREATE TABLE lop_hoc (
        id_lop VARCHAR(50) PRIMARY KEY, -- Cho phép ID có cả chữ và số
        id_khoahoc INT NOT NULL,
        ten_lop VARCHAR(100) NOT NULL, -- Tên lớp học
        giang_vien VARCHAR(100), -- Giảng viên phụ trách
        so_luong_hoc_vien INT DEFAULT 0, -- Số lượng học viên tối đa
        trang_thai ENUM('dang hoc', 'da xong') DEFAULT 'dang hoc', -- Trạng thái lớp học
        FOREIGN KEY (id_khoahoc) REFERENCES khoahoc(id_khoahoc) ON DELETE CASCADE
    );


    -- Bảng dangkykhoahoc 
    CREATE TABLE dangkykhoahoc (
        id_dangky INT PRIMARY KEY AUTO_INCREMENT,
        id_hocvien INT,
        id_khoahoc INT,
        ngay_dangky DATE,
        trang_thai VARCHAR(50),
        id_lop VARCHAR(50),
        FOREIGN KEY (id_lop) REFERENCES lop_hoc(id_lop) ON DELETE SET NULL,
        FOREIGN KEY (id_hocvien) REFERENCES hocvien(id_hocvien),
        FOREIGN KEY (id_khoahoc) REFERENCES khoahoc(id_khoahoc) 
    );



    CREATE TABLE lichhoc (
        id_lichhoc INT PRIMARY KEY AUTO_INCREMENT, -- ID tự động tăng cho từng lịch học
        id_lop VARCHAR(50) NOT NULL, -- Liên kết với ID lớp học, cho phép chữ và số
        ngay_hoc DATE NOT NULL, -- Ngày học
        gio_bat_dau TIME NOT NULL, -- Giờ bắt đầu
        gio_ket_thuc TIME NOT NULL, -- Giờ kết thúc
        phong_hoc VARCHAR(100), -- Phòng học
        ghi_chu TEXT, -- Ghi chú
        FOREIGN KEY (id_lop) REFERENCES lop_hoc(id_lop) ON DELETE CASCADE
    );


    -- bảng baitest
    create table baitest (
        id_baitest int primary key auto_increment,
        id_khoahoc int,
        ten_baitest varchar(100),
        thoi_gian int,
        ngay_tao datetime,
        foreign key (id_khoahoc) references khoahoc(id_khoahoc) ON DELETE CASCADE
    );

    -- bảng cauhoi
    create table cauhoi (
        id_cauhoi int primary key auto_increment,
        id_baitest int,
        noi_dung text,
        foreign key (id_baitest) references baitest(id_baitest) ON DELETE CASCADE
    );

    -- bảng dapan
    create table dapan (
        id_dapan int primary key auto_increment,
        id_cauhoi int,
        id_baitest int,
        noi_dung_dapan varchar(255),
        la_dung boolean,
        foreign key (id_cauhoi) references cauhoi(id_cauhoi) ON DELETE CASCADE,
        foreign key (id_baitest) references baitest(id_baitest) 
    );

    -- bảng ketquabaitest
    create table ketquabaitest (
        id_ketqua int primary key auto_increment,
        id_cauhoi int,
        id_hocvien int,
        id_baitest int,
        diem decimal(10, 2),
        ngay_lam_bai datetime,
        foreign key (id_cauhoi) references cauhoi(id_cauhoi),
        foreign key (id_hocvien) references hocvien(id_hocvien),
        foreign key (id_baitest) references baitest(id_baitest) ON DELETE SET NULL
    );

    -- bảng thongbao
    create table thongbao (
        id_thongbao int primary key auto_increment,
        id_hocvien int null,
        id_khoahoc int null,
        noi_dung text,
        ngay_tao date,
        tu_dong boolean,
        tieu_de text,
        foreign key (id_hocvien) references hocvien(id_hocvien),
        foreign key (id_khoahoc) references khoahoc(id_khoahoc)
    );

    -- bảng danhgiakhoahoc
    create table danhgiakhoahoc (
        id_danhgia int primary key auto_increment,
        id_hocvien int,
        id_khoahoc int,
        diem_danhgia int check (diem_danhgia between 1 and 5),
        nhan_xet text,
        foreign key (id_hocvien) references hocvien(id_hocvien),
        foreign key (id_khoahoc) references khoahoc(id_khoahoc)
    );



    create table lichsu_thanhtoan (
        id_thanhtoan int primary key auto_increment,
        id_hocvien int,
        id_khoahoc int, -- Thêm cột để lưu ID khóa học
        ngay_thanhtoan date,
        so_tien decimal(10, 2),
        hinh_thuc varchar(50), -- Ví dụ: "chuyển khoản", "tiền mặt"
        trang_thai varchar(20), -- Ví dụ: "thành công", "đang chờ"
        foreign key (id_hocvien) references hocvien(id_hocvien),
        foreign key (id_khoahoc) references khoahoc(id_khoahoc) -- Liên kết với bảng khoahoc
    );



    -- Bảng tiến độ học tập
    CREATE TABLE tien_do_hoc_tap (
        id_tien_do INT PRIMARY KEY AUTO_INCREMENT,
        id_hocvien INT NOT NULL,
        id_khoahoc INT NOT NULL,
        tien_do DECIMAL(5, 2) DEFAULT 0, -- Tiến độ (phần trăm)
        so_buoi_da_tham_gia INT DEFAULT 0, -- Số buổi đã tham gia 
        tong_so_buoi INT DEFAULT 0, -- Tổng số buổi trong khóa học
        ngay_cap_nhat TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (id_hocvien) REFERENCES hocvien(id_hocvien),
        FOREIGN KEY (id_khoahoc) REFERENCES khoahoc(id_khoahoc)
    );



    CREATE TABLE diem_danh (
        id_diemdanh INT PRIMARY KEY AUTO_INCREMENT,
        id_hocvien INT NOT NULL,
        id_lop VARCHAR(50) NOT NULL,
        id_lichhoc INT NOT NULL,
        trang_thai ENUM('co mat', 'vang', 'muon') DEFAULT 'co mat', -- Trạng thái điểm danh
        ngay_diemdanh DATE DEFAULT CURRENT_DATE, -- Ngày điểm danh
        ghi_chu TEXT, -- Ghi chú nếu cần
        FOREIGN KEY (id_hocvien) REFERENCES hocvien(id_hocvien) ON DELETE CASCADE,
        FOREIGN KEY (id_lop) REFERENCES lop_hoc(id_lop) ON DELETE CASCADE,
        FOREIGN KEY (id_lichhoc) REFERENCES lichhoc(id_lichhoc) ON DELETE CASCADE
    );




    -- Trigger để cập nhật danh_gia_tb sau khi thêm hoặc cập nhật bản ghi trong danhgiakhoahoc
    DELIMITER //
    CREATE TRIGGER capnhat_danh_gia_tb_insert_update
    AFTER INSERT ON danhgiakhoahoc
    FOR EACH ROW
    BEGIN
        DECLARE tb DECIMAL(3,2);
        SELECT IFNULL(AVG(diem_danhgia), NULL) INTO tb
        FROM danhgiakhoahoc
        WHERE id_khoahoc = NEW.id_khoahoc;

        UPDATE khoahoc
        SET danh_gia_tb = tb
        WHERE id_khoahoc = NEW.id_khoahoc;
    END;
    //

    -- Trigger để cập nhật danh_gia_tb sau khi xóa bản ghi trong danhgiakhoahoc
    CREATE TRIGGER capnhat_danh_gia_tb_delete
    AFTER DELETE ON danhgiakhoahoc
    FOR EACH ROW
    BEGIN
        DECLARE tb DECIMAL(3,2);
        SELECT IFNULL(AVG(diem_danhgia), NULL) INTO tb
        FROM danhgiakhoahoc
        WHERE id_khoahoc = OLD.id_khoahoc;

        UPDATE khoahoc
        SET danh_gia_tb = tb
        WHERE id_khoahoc = OLD.id_khoahoc;
    END;
    //
    DELIMITER ;

    Trigger Tự Động Gửi Thông Báo Cho Học Viên Đăng Ký


    DELIMITER $$

    -- Xóa trigger cũ nếu đã tồn tại
    DROP TRIGGER IF EXISTS after_insert_lichhoc$$

    -- Tạo trigger mới
    CREATE TRIGGER after_insert_lichhoc
    AFTER INSERT ON lichhoc
    FOR EACH ROW
    BEGIN
        DECLARE khoahoc_id INT;
        DECLARE tenlop VARCHAR(100);

        -- Lấy id_khoahoc và ten_lop từ bảng lop_hoc dựa trên id_lop
        SELECT id_khoahoc, ten_lop INTO khoahoc_id, tenlop
        FROM lop_hoc
        WHERE id_lop = NEW.id_lop;

        -- Thêm thông báo cho từng học viên đã đăng ký lớp học
        INSERT INTO thongbao (id_hocvien, id_khoahoc, noi_dung, ngay_tao, tu_dong, tieu_de)
        SELECT 
            dk.id_hocvien, 
            khoahoc_id, 
            CONCAT('Lớp học "', tenlop, '" của khóa học "', kh.ten_khoahoc, '" có lịch học mới vào ngày: ', DATE_FORMAT(NEW.ngay_hoc, '%d/%m/%Y')), 
            NOW(), 
            TRUE, 
            'Thông báo lịch học mới'
        FROM dangkykhoahoc dk
        JOIN khoahoc kh ON kh.id_khoahoc = dk.id_khoahoc
        WHERE dk.id_lop = NEW.id_lop;
    END$$

    DELIMITER ;





    Trigger tự động cập nhật số lượng học viên trong lop_hoc:
    Khi có thay đổi trong dangkykhoahoc, bạn có thể tự động cập nhật số lượng học viên của lớp trong lop_hoc:
    DELIMITER $$

    -- Trigger khi thêm học viên vào lớp
    CREATE TRIGGER update_soluong_hocvien_after_insert
    AFTER INSERT ON dangkykhoahoc
    FOR EACH ROW
    BEGIN
        UPDATE lop_hoc
        SET so_luong_hoc_vien = so_luong_hoc_vien + 1
        WHERE id_lop = NEW.id_lop;
    END$$

    -- Trigger khi xóa học viên khỏi lớp
    CREATE TRIGGER update_soluong_hocvien_after_delete
    AFTER DELETE ON dangkykhoahoc
    FOR EACH ROW
    BEGIN
        UPDATE lop_hoc
        SET so_luong_hoc_vien = so_luong_hoc_vien - 1
        WHERE id_lop = OLD.id_lop;
    END$$

    DELIMITER ;


    DELIMITER $$

    -- Trigger cập nhật tổng số buổi khi thêm lịch học
    CREATE TRIGGER update_tong_so_buoi_after_insert
    AFTER INSERT ON lichhoc
    FOR EACH ROW
    BEGIN
        -- Cập nhật tổng số buổi học cho tất cả học viên trong khóa học
        UPDATE tien_do_hoc_tap td
        SET tong_so_buoi = (
            SELECT COUNT(*)
            FROM lichhoc lh
            WHERE lh.id_lop = NEW.id_lop
        )
        WHERE td.id_khoahoc = (
            SELECT id_khoahoc
            FROM lop_hoc
            WHERE id_lop = NEW.id_lop
        );
    END$$

    -- Trigger cập nhật tổng số buổi khi xóa lịch học
    CREATE TRIGGER update_tong_so_buoi_after_delete
    AFTER DELETE ON lichhoc
    FOR EACH ROW
    BEGIN
        -- Cập nhật tổng số buổi học cho tất cả học viên trong khóa học
        UPDATE tien_do_hoc_tap td
        SET tong_so_buoi = (
            SELECT COUNT(*)
            FROM lichhoc lh
            WHERE lh.id_lop = OLD.id_lop
        )
        WHERE td.id_khoahoc = (
            SELECT id_khoahoc
            FROM lop_hoc
            WHERE id_lop = OLD.id_lop
        );
    END$$

    DELIMITER ;


    DELIMITER $$

    CREATE TRIGGER trg_update_tien_do
    BEFORE UPDATE ON tien_do_hoc_tap
    FOR EACH ROW
    BEGIN
        -- Kiểm tra nếu giá trị `so_buoi_da_tham_gia` hoặc `tong_so_buoi` thay đổi
        IF NEW.so_buoi_da_tham_gia != OLD.so_buoi_da_tham_gia THEN
            -- Kiểm tra nếu tổng số buổi lớn hơn 0 để tránh chia cho 0
            IF NEW.tong_so_buoi > 0 THEN
                -- Cập nhật giá trị tiến độ dựa trên số buổi đã tham gia và tổng số buổi
                SET NEW.tien_do = (NEW.so_buoi_da_tham_gia / NEW.tong_so_buoi) * 100;
            ELSE
                -- Nếu tổng số buổi là 0, đặt tiến độ về 0
                SET NEW.tien_do = 0;
            END IF;
        END IF;
    END$$

    DELIMITER ;





