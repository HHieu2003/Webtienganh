-- --------------------------------------------------------
-- Xóa cơ sở dữ liệu cũ nếu tồn tại và tạo lại
-- --------------------------------------------------------
DROP DATABASE IF EXISTS `quanlykhoahoc`;
CREATE DATABASE `quanlykhoahoc` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE `quanlykhoahoc`;

-- --------------------------------------------------------
-- Bảng không có khóa ngoại (hoặc chỉ được tham chiếu)
-- --------------------------------------------------------

CREATE TABLE `giangvien` (
  `id_giangvien` INT PRIMARY KEY AUTO_INCREMENT,
  `ten_giangvien` VARCHAR(100) NOT NULL,
  `so_dien_thoai` VARCHAR(15) NULL,
  `mat_khau` VARCHAR(255),
  `email` VARCHAR(100) NULL UNIQUE,
  `mo_ta` TEXT NULL COMMENT 'Mô tả chuyên môn, kinh nghiệm của giảng viên',
  `hinh_anh` VARCHAR(255) NULL
) ENGINE=InnoDB;

CREATE TABLE `tuvan` (
  `id_tuvan` INT PRIMARY KEY AUTO_INCREMENT,
  `ten_hocvien` VARCHAR(100),
  `so_dien_thoai` VARCHAR(15),
  `email` VARCHAR(100),
  `khung_gio` VARCHAR(20),
  `trang_thai` NVARCHAR(100) DEFAULT 'Chưa liên hệ'
) ENGINE=InnoDB;

CREATE TABLE `hocvien` (
  `id_hocvien` INT PRIMARY KEY AUTO_INCREMENT,
  `ten_hocvien` VARCHAR(100),
  `email` VARCHAR(100),
  `so_dien_thoai` VARCHAR(15),
  `mat_khau` VARCHAR(255),
  `is_admin` BOOLEAN DEFAULT FALSE
) ENGINE=InnoDB;

ALTER TABLE `hocvien` ADD `trinh_do` VARCHAR(50) NULL DEFAULT NULL COMMENT 'Trình độ được phân loại sau bài test' AFTER `mat_khau`;
-- --------------------------------------------------------
-- Bảng có tham chiếu đến các bảng trên
-- --------------------------------------------------------

CREATE TABLE `khoahoc` (
  `id_khoahoc` INT PRIMARY KEY AUTO_INCREMENT,
  `ten_khoahoc` VARCHAR(100),
  `mo_ta` TEXT,
  `id_giangvien` INT NULL COMMENT 'Giảng viên chính của khóa học',
  `thoi_gian` DATE,
  `chi_phi` INT,
  `hinh_anh` VARCHAR(255),
  `danh_gia_tb` DECIMAL(3, 2),
  FOREIGN KEY (`id_giangvien`) REFERENCES `giangvien`(`id_giangvien`) ON DELETE SET NULL
) ENGINE=InnoDB;
ALTER TABLE `khoahoc` CHANGE `thoi_gian` `thoi_gian` INT(11) NULL DEFAULT NULL COMMENT 'Thời lượng khóa học (tính bằng số buổi)';
CREATE TABLE `lop_hoc` (
  `id_lop` VARCHAR(50) PRIMARY KEY,
  `id_khoahoc` INT NOT NULL,
  `ten_lop` VARCHAR(100) NOT NULL,
  `id_giangvien` INT NULL COMMENT 'Giảng viên trực tiếp đứng lớp',
  `so_luong_hoc_vien` INT DEFAULT 0,
  `trang_thai` ENUM('dang hoc', 'da xong') DEFAULT 'dang hoc',
  FOREIGN KEY (`id_khoahoc`) REFERENCES `khoahoc`(`id_khoahoc`) ON DELETE CASCADE,
  FOREIGN KEY (`id_giangvien`) REFERENCES `giangvien`(`id_giangvien`) ON DELETE SET NULL
) ENGINE=InnoDB;

CREATE TABLE `lichhoc` (
  `id_lichhoc` INT PRIMARY KEY AUTO_INCREMENT,
  `id_lop` VARCHAR(50) NOT NULL,
  `ngay_hoc` DATE NOT NULL,
  `gio_bat_dau` TIME NOT NULL,
  `gio_ket_thuc` TIME NOT NULL,
  `phong_hoc` VARCHAR(100) COMMENT 'Tên phòng học hoặc link học Online',
  `ghi_chu` TEXT,
  FOREIGN KEY (`id_lop`) REFERENCES `lop_hoc`(`id_lop`) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE `hoc_lieu` (
  `id_hoclieu` INT PRIMARY KEY AUTO_INCREMENT,
  `id_lop` VARCHAR(50) NOT NULL,
  `tieu_de` VARCHAR(255) NULL,
  `loai_file` VARCHAR(50) COMMENT 'ví dụ: PDF, Video, Link, DOCX',
  `duong_dan_file` VARCHAR(255) NULL,
  `ngay_dang` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`id_lop`) REFERENCES `lop_hoc`(`id_lop`) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE `dangkykhoahoc` (
  `id_dangky` INT PRIMARY KEY AUTO_INCREMENT,
  `id_hocvien` INT,
  `id_khoahoc` INT,
  `ngay_dangky` DATE,
  `trang_thai` VARCHAR(50),
  `id_lop` VARCHAR(50),
  `ghi_chu` TEXT NULL COMMENT 'Ghi chú của học viên khi đăng ký không có lớp',
  FOREIGN KEY (`id_lop`) REFERENCES `lop_hoc`(`id_lop`) ON DELETE SET NULL,
  FOREIGN KEY (`id_hocvien`) REFERENCES `hocvien`(`id_hocvien`),
  FOREIGN KEY (`id_khoahoc`) REFERENCES `khoahoc`(`id_khoahoc`)
) ENGINE=InnoDB;

ALTER TABLE `dangkykhoahoc` 
ADD `thoi_gian_tao` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP AFTER `trang_thai`;

CREATE TABLE `diem_so` (
  `id_diem` INT PRIMARY KEY AUTO_INCREMENT,
  `id_hocvien` INT NOT NULL,
  `id_lop` VARCHAR(50) NOT NULL,
  `diem` DECIMAL(4, 2) NOT NULL,
  `loai_diem` VARCHAR(100) COMMENT 'Ví dụ: Giữa kỳ, Cuối kỳ, Bài tập lớn',
  `ngay_nhap_diem` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `nhan_xet` TEXT NULL,
  FOREIGN KEY (`id_hocvien`) REFERENCES `hocvien`(`id_hocvien`) ON DELETE CASCADE,
  FOREIGN KEY (`id_lop`) REFERENCES `lop_hoc`(`id_lop`) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE `baitest` (
  `id_baitest` INT PRIMARY KEY AUTO_INCREMENT,
  `ten_baitest` VARCHAR(100),
  `loai_baitest` ENUM('dau_vao', 'dinh_ky', 'on_tap') NOT NULL DEFAULT 'on_tap' COMMENT 'Phân loại: đầu vào, định kỳ, ôn tập',
  `id_khoahoc` INT NULL COMMENT 'Gắn với khóa học (nếu phạm vi là khóa học)',
  `id_lop` VARCHAR(50) NULL COMMENT 'Gắn với lớp học cụ thể (nếu phạm vi là lớp)',
  `thoi_gian` INT COMMENT 'Thời gian làm bài (phút)',
  `ngay_tao` DATETIME,
  FOREIGN KEY (`id_khoahoc`) REFERENCES `khoahoc`(`id_khoahoc`) ON DELETE CASCADE,
  FOREIGN KEY (`id_lop`) REFERENCES `lop_hoc`(`id_lop`) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE `cauhoi` (
  `id_cauhoi` INT PRIMARY KEY AUTO_INCREMENT,
  `id_baitest` INT,
  `noi_dung` TEXT,
  FOREIGN KEY (`id_baitest`) REFERENCES `baitest`(`id_baitest`) ON DELETE CASCADE
) ENGINE=InnoDB;

CREATE TABLE `dapan` (
  `id_dapan` INT PRIMARY KEY AUTO_INCREMENT,
  `id_cauhoi` INT,
  `id_baitest` INT,
  `noi_dung_dapan` VARCHAR(255),
  `la_dung` BOOLEAN,
  FOREIGN KEY (`id_cauhoi`) REFERENCES `cauhoi`(`id_cauhoi`) ON DELETE CASCADE,
  FOREIGN KEY (`id_baitest`) REFERENCES `baitest`(`id_baitest`)
) ENGINE=InnoDB;

CREATE TABLE `ketquabaitest` (
  `id_ketqua` INT PRIMARY KEY AUTO_INCREMENT,
  `id_cauhoi` INT,
  `id_hocvien` INT,
  `id_baitest` INT,
  `diem` DECIMAL(10, 2),
  `ngay_lam_bai` DATETIME,
  FOREIGN KEY (`id_cauhoi`) REFERENCES `cauhoi`(`id_cauhoi`),
  FOREIGN KEY (`id_hocvien`) REFERENCES `hocvien`(`id_hocvien`),
  FOREIGN KEY (`id_baitest`) REFERENCES `baitest`(`id_baitest`) ON DELETE SET NULL
) ENGINE=InnoDB;

CREATE TABLE `thongbao` (
  `id_thongbao` INT PRIMARY KEY AUTO_INCREMENT,
  `id_hocvien` INT NULL,
  `id_khoahoc` INT NULL,
  `noi_dung` TEXT,
  `ngay_tao` DATE,
  `tu_dong` BOOLEAN,
  `tieu_de` TEXT,
  FOREIGN KEY (`id_hocvien`) REFERENCES `hocvien`(`id_hocvien`),
  FOREIGN KEY (`id_khoahoc`) REFERENCES `khoahoc`(`id_khoahoc`)
) ENGINE=InnoDB;
ALTER TABLE `thongbao` CHANGE `ngay_tao` `ngay_tao` DATETIME NULL DEFAULT NULL;

ALTER TABLE `thongbao` ADD `trang_thai` VARCHAR(50) NOT NULL DEFAULT 'chưa đọc' AFTER `tieu_de`;

CREATE TABLE `danhgiakhoahoc` (
  `id_danhgia` INT PRIMARY KEY AUTO_INCREMENT,
  `id_hocvien` INT,
  `id_khoahoc` INT,
  `diem_danhgia` INT CHECK (`diem_danhgia` BETWEEN 1 AND 5),
  `nhan_xet` TEXT,
  FOREIGN KEY (`id_hocvien`) REFERENCES `hocvien`(`id_hocvien`),
  FOREIGN KEY (`id_khoahoc`) REFERENCES `khoahoc`(`id_khoahoc`)
) ENGINE=InnoDB;

CREATE TABLE `lichsu_thanhtoan` (
  `id_thanhtoan` INT PRIMARY KEY AUTO_INCREMENT,
  `id_hocvien` INT,
  `id_khoahoc` INT,
  `ngay_thanhtoan` DATE,
  `so_tien` DECIMAL(10, 2),
  `hinh_thuc` VARCHAR(50),
  `trang_thai` VARCHAR(20),
  FOREIGN KEY (`id_hocvien`) REFERENCES `hocvien`(`id_hocvien`),
  FOREIGN KEY (`id_khoahoc`) REFERENCES `khoahoc`(`id_khoahoc`)
) ENGINE=InnoDB;

CREATE TABLE `tien_do_hoc_tap` (
  `id_tien_do` INT PRIMARY KEY AUTO_INCREMENT,
  `id_hocvien` INT NOT NULL,
  `id_khoahoc` INT NOT NULL,
  `tien_do` DECIMAL(5, 2) DEFAULT 0,
  `so_buoi_da_tham_gia` INT DEFAULT 0,
  `tong_so_buoi` INT DEFAULT 0,
  `ngay_cap_nhat` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (`id_hocvien`) REFERENCES `hocvien`(`id_hocvien`),
  FOREIGN KEY (`id_khoahoc`) REFERENCES `khoahoc`(`id_khoahoc`)
) ENGINE=InnoDB;

CREATE TABLE `diem_danh` (
  `id_diemdanh` INT PRIMARY KEY AUTO_INCREMENT,
  `id_hocvien` INT NOT NULL,
  `id_lop` VARCHAR(50) NOT NULL,
  `id_lichhoc` INT NOT NULL,
  `trang_thai` ENUM('co mat', 'vang', 'muon') DEFAULT 'co mat',
  `ngay_diemdanh` DATE DEFAULT CURRENT_DATE,
  `ghi_chu` TEXT,
  FOREIGN KEY (`id_hocvien`) REFERENCES `hocvien`(`id_hocvien`) ON DELETE CASCADE,
  FOREIGN KEY (`id_lop`) REFERENCES `lop_hoc`(`id_lop`) ON DELETE CASCADE,
  FOREIGN KEY (`id_lichhoc`) REFERENCES `lichhoc`(`id_lichhoc`) ON DELETE CASCADE
) ENGINE=InnoDB;
ALTER TABLE `diem_danh` ADD UNIQUE `unique_attendance` (`id_hocvien`, `id_lop`, `id_lichhoc`);
-- --------------------------------------------------------
-- CÁC TRIGGER
-- --------------------------------------------------------
DELIMITER //
CREATE TRIGGER capnhat_danh_gia_tb_insert_update
AFTER INSERT ON danhgiakhoahoc
FOR EACH ROW
BEGIN
    DECLARE tb DECIMAL(3,2);
    SELECT IFNULL(AVG(diem_danhgia), NULL) INTO tb
    FROM danhgiakhoahoc
    WHERE id_khoahoc = NEW.id_khoahoc;

    UPDATE khoahoc
    SET danh_gia_tb = tb
    WHERE id_khoahoc = NEW.id_khoahoc;
END;
//

CREATE TRIGGER capnhat_danh_gia_tb_delete
AFTER DELETE ON danhgiakhoahoc
FOR EACH ROW
BEGIN
    DECLARE tb DECIMAL(3,2);
    SELECT IFNULL(AVG(diem_danhgia), NULL) INTO tb
    FROM danhgiakhoahoc
    WHERE id_khoahoc = OLD.id_khoahoc;

    UPDATE khoahoc
    SET danh_gia_tb = tb
    WHERE id_khoahoc = OLD.id_khoahoc;
END;
//
DELIMITER ;



-- Sử dụng DELIMITER để có thể viết trigger chứa dấu chấm phẩy
DELIMITER $$

-- Xóa trigger cũ đi để tránh lỗi
DROP TRIGGER IF EXISTS `after_insert_lichhoc`$$

-- Tạo lại trigger mới với logic đã được cập nhật
CREATE TRIGGER `after_insert_lichhoc`
AFTER INSERT ON `lichhoc`
FOR EACH ROW
BEGIN
    -- Khai báo các biến để lưu thông tin
    DECLARE v_khoahoc_id INT;
    DECLARE v_ten_lop VARCHAR(100);

    -- Lấy id_khoahoc và ten_lop từ lớp vừa được thêm lịch học
    SELECT id_khoahoc, ten_lop INTO v_khoahoc_id, v_ten_lop
    FROM lop_hoc
    WHERE id_lop = NEW.id_lop;

    -- Chèn thông báo cho mỗi học viên trong lớp đó
    -- Câu lệnh INSERT này đã được BỔ SUNG thêm cột 'id_lop'
    INSERT INTO thongbao (id_hocvien, id_khoahoc, id_lop, noi_dung, ngay_tao, tu_dong, tieu_de)
    SELECT
        dk.id_hocvien,
        v_khoahoc_id,
        NEW.id_lop,  -- << DÒNG QUAN TRỌNG ĐƯỢC THÊM VÀO
        CONCAT('Lớp "', v_ten_lop, '" của bạn có lịch học mới vào ngày: ', DATE_FORMAT(NEW.ngay_hoc, '%d/%m/%Y'), '.'),
        NOW(),
        TRUE,
        'Thông báo lịch học mới'
    FROM dangkykhoahoc dk
    WHERE dk.id_lop = NEW.id_lop;

END$$

-- Trả DELIMITER về mặc định
DELIMITER ;







-- Bắt đầu định nghĩa trigger mới
DELIMITER $$

-- Trigger này sẽ chạy SAU KHI một bản ghi đăng ký được THÊM MỚI
CREATE TRIGGER `after_dangkykhoahoc_insert`
AFTER INSERT ON `dangkykhoahoc`
FOR EACH ROW
BEGIN
    -- Nếu học viên được gán vào một lớp ngay khi đăng ký, tăng sĩ số lớp đó lên 1
    IF NEW.id_lop IS NOT NULL THEN
        UPDATE lop_hoc SET so_luong_hoc_vien = so_luong_hoc_vien + 1 WHERE id_lop = NEW.id_lop;
    END IF;
END$$

-- Trigger này sẽ chạy SAU KHI một bản ghi đăng ký bị XÓA
CREATE TRIGGER `after_dangkykhoahoc_delete`
AFTER DELETE ON `dangkykhoahoc`
FOR EACH ROW
BEGIN
    -- Nếu học viên bị xóa khỏi một lớp, giảm sĩ số lớp đó đi 1
    IF OLD.id_lop IS NOT NULL THEN
        UPDATE lop_hoc SET so_luong_hoc_vien = so_luong_hoc_vien - 1 WHERE id_lop = OLD.id_lop;
    END IF;
END$$


DELIMITER $$
CREATE TRIGGER update_tong_so_buoi_after_insert
AFTER INSERT ON lichhoc
FOR EACH ROW
BEGIN
    UPDATE tien_do_hoc_tap td
    SET tong_so_buoi = (
        SELECT COUNT(*)
        FROM lichhoc lh
        WHERE lh.id_lop = NEW.id_lop
    )
    WHERE td.id_khoahoc = (
        SELECT id_khoahoc
        FROM lop_hoc
        WHERE id_lop = NEW.id_lop
    );
END$$

CREATE TRIGGER update_tong_so_buoi_after_delete
AFTER DELETE ON lichhoc
FOR EACH ROW
BEGIN
    UPDATE tien_do_hoc_tap td
    SET tong_so_buoi = (
        SELECT COUNT(*)
        FROM lichhoc lh
        WHERE lh.id_lop = OLD.id_lop
    )
    WHERE td.id_khoahoc = (
        SELECT id_khoahoc
        FROM lop_hoc
        WHERE id_lop = OLD.id_lop
    );
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER trg_update_tien_do
BEFORE UPDATE ON tien_do_hoc_tap
FOR EACH ROW
BEGIN
    IF NEW.so_buoi_da_tham_gia != OLD.so_buoi_da_tham_gia THEN
        IF NEW.tong_so_buoi > 0 THEN
            SET NEW.tien_do = (NEW.so_buoi_da_tham_gia / NEW.tong_so_buoi) * 100;
        ELSE
            SET NEW.tien_do = 0;
        END IF;
    END IF;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `after_dangkykhoahoc_update_final`
AFTER UPDATE ON `dangkykhoahoc`
FOR EACH ROW
BEGIN
    -- Kịch bản 1: Học viên được xác nhận sau khi thanh toán (hoặc được admin xác nhận thủ công)
    -- và được xếp vào một lớp.
    IF OLD.trang_thai != 'da xac nhan' AND NEW.trang_thai = 'da xac nhan' AND NEW.id_lop IS NOT NULL THEN
        -- Tăng sĩ số lớp học
        UPDATE lop_hoc SET so_luong_hoc_vien = so_luong_hoc_vien + 1 WHERE id_lop = NEW.id_lop;
        
        -- Lấy tổng số buổi học của lớp mới
        SET @total_sessions = (SELECT COUNT(*) FROM lichhoc WHERE id_lop = NEW.id_lop);
        
        -- Thêm bản ghi tiến độ học tập cho học viên
        INSERT INTO tien_do_hoc_tap (id_hocvien, id_khoahoc, tong_so_buoi, so_buoi_da_tham_gia, tien_do)
        VALUES (NEW.id_hocvien, NEW.id_khoahoc, @total_sessions, 0, 0);
    END IF;

    -- Kịch bản 2: Admin quản lý học viên ĐÃ ĐƯỢC XÁC NHẬN
    IF OLD.trang_thai = 'da xac nhan' AND NEW.trang_thai = 'da xac nhan' THEN
        
        -- A. Admin xóa học viên khỏi lớp (id_lop chuyển về NULL)
        IF OLD.id_lop IS NOT NULL AND NEW.id_lop IS NULL THEN
            UPDATE lop_hoc SET so_luong_hoc_vien = so_luong_hoc_vien - 1 WHERE id_lop = OLD.id_lop;
            DELETE FROM tien_do_hoc_tap WHERE id_hocvien = OLD.id_hocvien AND id_khoahoc = OLD.id_khoahoc;
        END IF;
        
        -- B. Admin chuyển học viên từ lớp A sang lớp B
        IF OLD.id_lop IS NOT NULL AND NEW.id_lop IS NOT NULL AND OLD.id_lop != NEW.id_lop THEN
            -- Giảm sĩ số lớp cũ, tăng sĩ số lớp mới
            UPDATE lop_hoc SET so_luong_hoc_vien = so_luong_hoc_vien - 1 WHERE id_lop = OLD.id_lop;
            UPDATE lop_hoc SET so_luong_hoc_vien = so_luong_hoc_vien + 1 WHERE id_lop = NEW.id_lop;
            
            -- Cập nhật lại tiến độ cho lớp mới (reset về 0)
            SET @new_total_sessions = (SELECT COUNT(*) FROM lichhoc WHERE id_lop = NEW.id_lop);
            UPDATE tien_do_hoc_tap 
            SET tong_so_buoi = @new_total_sessions, so_buoi_da_tham_gia = 0, tien_do = 0 
            WHERE id_hocvien = NEW.id_hocvien AND id_khoahoc = NEW.id_khoahoc;
        END IF;

    END IF;
END$$

DELIMITER ;


ALTER TABLE `thongbao` 
ADD `id_lop` VARCHAR(50) NULL DEFAULT NULL AFTER `id_khoahoc`,
ADD FOREIGN KEY (`id_lop`) REFERENCES `lop_hoc`(`id_lop`) ON DELETE SET NULL;

ALTER TABLE `hoc_lieu` 
ADD COLUMN `id_khoahoc` INT NULL AFTER `id_hoclieu`,
MODIFY COLUMN `id_lop` VARCHAR(50) NULL,
ADD FOREIGN KEY (`id_khoahoc`) REFERENCES `khoahoc`(`id_khoahoc`) ON DELETE CASCADE;


-- --------------------------------------------------------
-- BẢNG MỚI CHO VIỆC ĐẾM LƯỢT TRUY CẬP
-- --------------------------------------------------------
CREATE TABLE `luot_truy_cap` (
  `id` INT PRIMARY KEY AUTO_INCREMENT,
  `ngay_truy_cap` DATE NOT NULL UNIQUE,
  `so_luot` INT DEFAULT 1
) ENGINE=InnoDB;

-- Thêm một bản ghi ban đầu để bắt đầu đếm
INSERT INTO `luot_truy_cap` (ngay_truy_cap, so_luot) VALUES (CURDATE(), 1);

